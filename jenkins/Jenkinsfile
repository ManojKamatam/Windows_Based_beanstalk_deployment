pipeline {
    agent any

    environment {
        S3_BUCKET = 'my-s3-bucket-for-jenkins-pipeline-setup'
        S3_KEY = 'my-app.zip'
        ENVIRONMENT_NAME = 'Linux-based-web-application-env'
        APPLICATION_NAME = 'linux-based-web-application'
        AWS_REGION = 'us-east-1'
        SECRET_NAME = 'secret-jenkins-access'  // Replace with your actual secret name
        VERSION_LABEL = "app-version-${BUILD_NUMBER}"
    }

    stages {
        stage('Retrieve AWS Credentials from Secrets Manager') {
            steps {
                script {
                    def secretValue = powershell(script: "aws secretsmanager get-secret-value --secret-id ${SECRET_NAME} --query 'SecretString' --output text --region ${AWS_REGION}", returnStdout: true).trim()
                    
                    // Parse the plain text to extract credentials
                    def credentials = secretValue.replaceAll("[{}\"]", "").split(":")
                    def awsAccessKeyId = credentials[0].trim()
                    def awsSecretAccessKey = credentials[1].trim()

                    // Set environment variables for AWS credentials
                    env.AWS_ACCESS_KEY_ID = awsAccessKeyId
                    env.AWS_SECRET_ACCESS_KEY = awsSecretAccessKey
                }
            }
        }

        stage('Checkout') {
            steps {
                git url: 'https://github.com/ManojKamatam/Beanstalk_Deployments_maintainingVersions-SecretManager.git', branch: 'main'
            }
        }
        
        stage('Upload to S3') {
            steps {
                bat "aws s3 cp application.zip s3://${S3_BUCKET}/${S3_KEY} --region ${AWS_REGION}"
            }
        }

        stage('Create Application Version') {
            steps {
                bat """
                    aws elasticbeanstalk create-application-version \
                    --application-name ${APPLICATION_NAME} \
                    --version-label ${VERSION_LABEL} \
                    --source-bundle S3Bucket=${S3_BUCKET},S3Key=${S3_KEY} \
                    --region ${AWS_REGION}
                """
            }
        }

        stage('Update Elastic Beanstalk Environment') {
            steps {
                bat """
                    aws elasticbeanstalk update-environment \
                      --application-name ${APPLICATION_NAME} \
                      --environment-name ${ENVIRONMENT_NAME} \
                      --version-label ${VERSION_LABEL} \
                      --region ${AWS_REGION}
                """
            }
        }
    }

    post {
        always {
            echo 'Deployment process completed.'
        }
    }
}
