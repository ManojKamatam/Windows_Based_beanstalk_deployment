pipeline {
    agent any

    environment {
        S3_BUCKET = 'my-s3-bucket-for-jenkins-pipeline-setup'
        S3_KEY = 'my-app.zip'
        ENVIRONMENT_NAME = 'Windowsbasedpythonapplication-env'
        APPLICATION_NAME = 'windows_based_python_application'
        AWS_REGION = 'us-east-1'
        VERSION_LABEL = "app-version-${BUILD_NUMBER}"  // Unique version label using Jenkins build number
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/ManojKamatam/Windows_Based_beanstalk_deployment.git', branch: 'main'
            }
        }
        
        stage('Upload to S3') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials-id']]) {
                    bat "aws s3 cp application.zip s3://${S3_BUCKET}/${S3_KEY} --region ${AWS_REGION}"
                }
            }
        }

        stage('Deploy Application Version') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials-id']]) {
                    dir('terraform') {
                        bat """
                            terraform apply -auto-approve \
                            -var 's3_bucket=${S3_BUCKET}' \
                            -var 's3_key=${S3_KEY}' \
                            -var 'application_name=${APPLICATION_NAME}' \
                            -var 'version_label=${VERSION_LABEL}'
                        """
                    }
                }
            }
        }

        stage('Update Elastic Beanstalk Environment') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials-id']]) {
                    bat """
                        aws elasticbeanstalk update-environment \
                          --application-name ${APPLICATION_NAME} \
                          --environment-name ${ENVIRONMENT_NAME} \
                          --version-label ${VERSION_LABEL} \
                          --region ${AWS_REGION}
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Deployment process completed.'
        }
    }
}
