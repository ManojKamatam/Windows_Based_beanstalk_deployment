pipeline {
    agent any

    environment {
        S3_BUCKET = 'my-s3-bucket-for-jenkins-pipeline-setup'
        S3_KEY = 'my-app.zip'
        ENVIRONMENT_NAME = 'Linux-based-web-application-env'
        APPLICATION_NAME = 'linux-based-web-application'
        AWS_REGION = 'us-east-1'
        VERSION_LABEL = "app-version-${BUILD_NUMBER}"
        SECRET_NAME = 'secret-jenkins-access'
    }

    stages {
        stage('Retrieve AWS Credentials from Jenkins Credentials') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials-id']]) {
                    script {
                        // Execute the command and capture the raw output
                        def secretValue = bat(script: "aws secretsmanager get-secret-value --secret-id ${SECRET_NAME} --query 'SecretString' --output text --region ${AWS_REGION}", returnStdout: true).trim()

                        // Log the full command output for debugging
                        echo "Full command output: ${secretValue}"

                        try {
                            // Parse the JSON output
                            def jsonSlurper = new groovy.json.JsonSlurper()
                            def credentials = jsonSlurper.parseText(secretValue)

                            // Extract the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
                            env.AWS_ACCESS_KEY_ID = credentials.keySet().iterator().next()
                            env.AWS_SECRET_ACCESS_KEY = credentials[env.AWS_ACCESS_KEY_ID]

                            echo "Extracted AWS_ACCESS_KEY_ID: ${env.AWS_ACCESS_KEY_ID}"
                        } catch (Exception e) {
                            // Log the error
                            echo "Failed to parse the secret: ${e.message}"
                            error("Error in secret retrieval and parsing")
                        }
                    }
                }
            }
        }

        stage('Checkout') {
            steps {
                git url: 'https://github.com/ManojKamatam/Windows_Based_beanstalk_deployment.git', branch: 'main'
            }
        }

        stage('Upload to S3') {
            steps {
                bat "aws s3 cp application.zip s3://${S3_BUCKET}/${S3_KEY} --region ${AWS_REGION}"
            }
        }

        stage('Create Application Version') {
            steps {
                bat """
                    aws elasticbeanstalk create-application-version ^
                    --application-name ${APPLICATION_NAME} ^
                    --version-label ${VERSION_LABEL} ^
                    --source-bundle S3Bucket=${S3_BUCKET},S3Key=${S3_KEY} ^
                    --region ${AWS_REGION}
                """
            }
        }

        stage('Update Elastic Beanstalk Environment') {
            steps {
                bat """
                    aws elasticbeanstalk update-environment ^
                    --application-name ${APPLICATION_NAME} ^
                    --environment-name ${ENVIRONMENT_NAME} ^
                    --version-label ${VERSION_LABEL} ^
                    --region ${AWS_REGION}
                """
            }
        }
    }

    post {
        always {
            echo 'Deployment process completed.'
        }
    }
}
